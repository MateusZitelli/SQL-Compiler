import java.util.Arrays;
import Tokenizer.*;

public enum Production {
    Elemento(Grammatic.Coluna, Grammatic.ElementoPrime),
    // Representa Elemento' -> vazio
    ElementoPrime0(/*vazio*/),
    // Representa Elemento' -> virgula Elemento
    ElementoPrime1(TokenType.COMMA, Grammatic.Elemento),
    
    StartCreate(Grammatic.Create),
    StartUse(Grammatic.UDatabase),
    StartAlter(Grammatic.ATable),
    StartDrop(Grammatic.DTable),
    StartTruncate(Grammatic.DTable),
    StartInsert(Grammatic.CmdInsert),
    StartDelete(Grammatic.CmdDelete),
    StartSelect(Grammatic.CmdSelect),    
    CreateCreate(TokenType.create, Grammatic.Create'),
    UDatabaseUse(TokenType.use, TokenType.id, TokenType.END_STATEMENT),
    ATableAlter(TokenType.alter, TokenType.table, TokenType.id, Grammatic.Stmt),
    DTableDrop(TokenType.drop, TokenType.table, TokenType.id, TokenType.END_STATEMENT),
    DTableTruncate(TokenType.truncate, TokenType.table, TokenType.id, TokenType.END_STATEMENT),
    CmdInsertInsert(TokenType.insert, TokenType.into, TokenType.id, TokenType.OPEN_PARENTHESIS, Grammatic.Columns, TokenType.CLOSE_PARENTHESIS, TokenType.values, TokenType.OPEN_PARENTHESIS, Grammatic.ColumnsValue, TokenType.CLOSE_PARENTHESIS),
    CmdDeleteDelete(TokenType.delete, TokenType.from, TokenType.id, Grammatic.CmdWhere, TokenType.END_STATEMENT),
    CmdSelectSelect(TokenType.select, Grammatic.Columns, TokenType.from, Grammatic.Tables, Grammatic.CmdWhere, TokenType.END_STATEMENT),
    Create'Database(Grammatic.CDatabase),
    Create'Id(Grammatic.CTable),
    CDatabaseDatabase(TokenType.database, TokenType.id, TokenType.END_STATEMENT),
    CTableId(TokenType.id, Grammatic.ConteudoTabela),
    ConteudoTabelaOPEN_PARENTHESIS(TokenType.OPEN_PARENTHESIS, Grammatic.Elemento, TokenType.CLOSE_PARENTHESIS),
    ElementoId(Grammatic.Coluna, Grammatic.Elemento'),
    ColunaId(TokenType.id, Grammatic.DataType, Grammatic.Condition),
    Elemento'CLOSE_PARENTHESIS(),
    Elemento'Comma(TokenType.COMMA, Grammatic.Elemento),
    DataTypeInt(TokenType.int),
    DataTypeNumeric(TokenType.numeric, TokenType.OPEN_PARENTHESIS, TokenType.number, TokenType.COMMA, TokenType.numer, TokenType.CLOSE_PARENTHESIS),
    DataTypeChar(TokenType.char, TokenType.OPEN_PARENTHESIS, TokenType.number, TokenType.CLOSE_PARENTHESIS),
    DataTypeVarchar(TokenType.varchar, TokenType.OPEN_PARENTHESIS, TokenType.number, TokenType.CLOSE_PARENTHESIS),
    DataTypeDate(TokenType.date),
    ConditionCLOSE_PARENTHESIS(),
    ConditionComma(),
    ConditionNot(TokenType.not, TokenType.Null, Grammatic.Condition),
    ConditionPrimary(TokenType.primary, TokenType.key, TokenType.OPEN_PARENTHESIS, TokenType.id, TokenType.CLOSE_PARENTHESIS, Grammatic.Condition),
    ConditionAuto_increment(TokenType.auto_increment, Grammatic.Condition),
    ConditionForeign(TokenType.foreign, TokenType.key, TokenType.OPEN_PARENTHESIS, TokenType.id, TokenType.CLOSE_PARENTHESIS, TokenType.references, TokenType.id, TokenType.OPEN_PARENTHESIS, TokenType.id, TokenType.CLOSE_PARENTHESIS, Grammatic.Condition),    
    StmtAdd(TokenType.add, Grammatic.ConteudoTabela),
    StmtDrop(TokenType.drop, Grammatic.ConteudoTabela),
    StmtRename(TokenType.rename, Grammatic.ConteudoTabela),
    StmtModify(TokenType.modify, Grammatic.ConteudoTabela),
    ColumnsId(Grammatic.Columns'),
    ColumnsSTAR(TokenType.STAR),
    ColumnValueQUOTE(TokenType.QUOTE, TokenType.id, TokenType.QUOTE, Grammatic.ColumnValue'),
    ColumnValueNumber(TokenType.number, Grammatic.ColumnValue''),
    Columns'Id(TokenType.id, Grammatic.Columns''),
    Columns''CLOSE_PARENTHESIS(),
    Columns''Comma(TokenType.COMMA, Grammatic.Columns'),
    Columns''From(),
    ColumnValue'CLOSE_PARENTHESIS(),
    ColumnValue'Comma(TokenType.COMMA, Grammatic.ColumnValue),
    ColumnValue''CLOSE_PARENTHESIS(),
    ColumnValue''Comma(TokenType.COMMA, Grammatic.ColumnValue),
    CmdWhereEND_STATEMENT(),
    CmdWhereWhere(TokenType.where, Grammatic.Whereclausule),
    WhereclausuleId(TokenType.id, Grammatic.Operator, TokenType.id, Grammatic.Whereclausule'),
    OperatorIgual(TokenType.igual),
    OperatorDiferente(TokenType.diferente),
    OperatorMaior(TokenType.maior),
    OperatorMenor(TokenType.menor),
    OperatorMenorigual(TokenType.menorigual),
    OperatorMaiorigual(TokenType.maiorigual),
    Whereclausule'END_STATEMENT(),
    Whereclausule'And(Grammatic.Logical, Grammatic.Whereclausule),
    Whereclausule'Or(Grammatic.Logical, Grammatic.Whereclausule),
    LogicalAnd(TokenType.and),
    LogicalOr(TokenType.or),
    TablesId(TokenType.id, Grammatic.Tables'),
    Tables'END_STATEMENT(),
    Tables'Comma(TokenType.COMMA, Grammatic.Tables),
    Tables'Where();
    
    Object[] productions;

    private Production(Object... productions) {
        this.productions = productions;
    }
}
